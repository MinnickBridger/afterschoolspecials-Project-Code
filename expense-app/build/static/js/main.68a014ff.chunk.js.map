{"version":3,"sources":["logo.svg","aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","awsmobile","aws_project_region","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","Amplify","configure","aws_exports","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasLoadedBudget","user","budget","getUserBudget","bind","assertThisInitialized","createUserBudget","Auth","currentAuthenticatedUser","then","console","log","setState","data","catch","err","document","title","_this$state","react_default","a","createElement","className","Container","Label","JSON","stringify","style","marginTop","Button","onClick","primary","_this2","parameters","userId","pool","clientId","API","graphql","graphqlOperation","results","listUserBudgets","items","length","_this3","Component","withAuthenticator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68a014ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile =  {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_content_delivery_bucket\": \"expense-app-20181113-hosting\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"http://expense-app-20181113-hosting.s3-website-us-east-1.amazonaws.com\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:3100247b-6ec7-4587-bbc3-12116ed550b1\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_ynBs7M3xV\",\n    \"aws_user_pools_web_client_id\": \"6u2375mt5tqflsor2ggb2j6b04\",\n    \"aws_appsync_graphqlEndpoint\": \"https://co4hltpzerf2ve3t4s25lrnl44.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\"\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Amplify, { API, graphqlOperation, Auth } from 'aws-amplify';\nimport aws_exports from './aws-exports';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { Button, Container, Icon, Label, Input, Dimmer, Loader, Segment } from 'semantic-ui-react';\nAmplify.configure(aws_exports);\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      hasLoadedBudget: false,\n      user: null,\n      budget: null\n    }\n    this.getUserBudget = this.getUserBudget.bind(this)\n    this.createUserBudget = this.createUserBudget.bind(this)\n    Auth.currentAuthenticatedUser()\n      .then(user => {\n        console.log(user)\n        this.setState({ user }, () => {\n          this.getUserBudget()\n        })\n\n      })\n      .then(data => console.log(data))\n      .catch(err => console.log(err));\n  }\n  componentDidMount() {\n    document.title = 'Expense App'\n  }\n\n  render() {\n    const { user, hasLoadedBudget, budget } = this.state\n    // if (user) {\n    //   return (\n    //     <div className=\"App\">\n    //       <body>\n    //         <Label>{JSON.stringify(user)}</Label>\n    //       </body>\n    //     </div>\n    //   )\n    // }\n    if (!hasLoadedBudget) {\n      return (\n        <div className=\"App\">\n          <body>\n            <Container>\n              <Label>Loading budget...</Label>\n            </Container>\n          </body>\n        </div>\n      )\n    }\n\n    if (budget) {\n      return (\n        <div className=\"App\">\n          <body>\n            <Container>\n              <Label>{JSON.stringify(budget)}</Label>\n            </Container>\n          </body>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <body>\n            <Container>\n              <div style={{ marginTop: 10 }}>\n                <Label>Let's create your first budget!</Label>\n              </div>\n              <div style={{ marginTop: 10 }}>\n                <Button onClick={this.createUserBudget} primary>Create!</Button>\n              </div>\n            </Container>\n          </body>\n        </div>\n      );\n    }\n  }\n\n  getUserBudget() {\n    // Simple query\n    const userBudgetQuery = `query ($userId: String) {\n      listUserBudgets(filter: {userID: {eq: $userId}}) {\n        items {\n          id\n          userID\n          categories {\n            title\n            precent\n            lineItems {\n              id\n              price\n            }\n          }\n        }\n      }\n    }`\n    const { user } = this.state\n\n    const parameters = { \"userId\": user.pool.clientId }\n    API.graphql(graphqlOperation(userBudgetQuery, parameters))\n      .then(results => {\n        console.log(\"MJV results => \", JSON.stringify(results))\n        const data = results.data.listUserBudgets.items\n        if (data.length > 0) {\n          const FIRST = 0\n          this.setState({ budget: data[FIRST] })\n        }\n        this.setState({ hasLoadedBudget: true })\n      })\n      .catch(err => {\n        console.log(\"MJV ERROR => \", err)\n      })\n\n  }\n\n  createUserBudget() {\n    const userBudgetQuery = `mutation ($userId: String!) {\n      createUserBudget(input: {userID: $userId}) {\n        id\n        userID\n      }\n    }`\n    const { user } = this.state\n\n    const parameters = { \"userId\": user.pool.clientId }\n    API.graphql(graphqlOperation(userBudgetQuery, parameters))\n      .then(results => {\n        this.getUserBudget()\n      })\n      .catch(err => {\n        console.log(\"MJV ERROR => \", err)\n      })\n  }\n}\n\nexport default withAuthenticator(App, true);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}