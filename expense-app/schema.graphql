schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type BudgetCategory {
  budgetID: String!
  id: ID!
  lineItems: [LineItem]
  precent: Float
  title: String!
}

type BudgetCategoryConnection {
  items: [BudgetCategory]
  nextToken: String
}

type LineItem {
  budgetID: String!
  categoryID: String!
  id: ID!
  price: Float!
  userID: String!
}

type LineItemConnection {
  items: [LineItem]
  nextToken: String
}

type ModelMyTypeConnection {
  items: [MyType]
  nextToken: String
}

type Mutation {
  createBudgetCategory(input: CreateBudgetCategoryInput!): BudgetCategory
  createLineItem(input: CreateLineItemInput!): LineItem
  createMyType(input: CreateMyTypeInput!): MyType
  createUserBudget(input: CreateUserBudgetInput!): UserBudget
  deleteBudgetCategory(input: DeleteBudgetCategoryInput!): BudgetCategory
  deleteLineItem(input: DeleteLineItemInput!): LineItem
  deleteMyType(input: DeleteMyTypeInput!): MyType
  deleteUserBudget(input: DeleteUserBudgetInput!): UserBudget
  updateBudgetCategory(input: UpdateBudgetCategoryInput!): BudgetCategory
  updateLineItem(input: UpdateLineItemInput!): LineItem
  updateMyType(input: UpdateMyTypeInput!): MyType
  updateUserBudget(input: UpdateUserBudgetInput!): UserBudget
}

type MyType {
  content: String!
  id: ID!
  price: Int
  rating: Float
  title: String!
}

type Query {
  getBudgetCategory(id: ID!): BudgetCategory
  getLineItem(id: ID!): LineItem
  getMyType(id: ID!): MyType
  getUserBudget(id: ID!): UserBudget
  listBudgetCategories(filter: TableBudgetCategoryFilterInput, limit: Int, nextToken: String): BudgetCategoryConnection
  listLineItems(filter: TableLineItemFilterInput, limit: Int, nextToken: String): LineItemConnection
  listMyTypes(filter: ModelMyTypeFilterInput, limit: Int, nextToken: String): ModelMyTypeConnection
  listUserBudgets(filter: TableUserBudgetFilterInput, limit: Int, nextToken: String): UserBudgetConnection
}

type Subscription {
  onCreateBudgetCategory(budgetID: String, id: ID, precent: Float, title: String): BudgetCategory @aws_subscribe(mutations : ["createBudgetCategory"])
  onCreateLineItem(budgetID: String, categoryID: String, id: ID, price: Float, userID: String): LineItem @aws_subscribe(mutations : ["createLineItem"])
  onCreateMyType: MyType @aws_subscribe(mutations : ["createMyType"])
  onCreateUserBudget(id: ID, userID: String): UserBudget @aws_subscribe(mutations : ["createUserBudget"])
  onDeleteBudgetCategory(budgetID: String, id: ID, precent: Float, title: String): BudgetCategory @aws_subscribe(mutations : ["deleteBudgetCategory"])
  onDeleteLineItem(budgetID: String, categoryID: String, id: ID, price: Float, userID: String): LineItem @aws_subscribe(mutations : ["deleteLineItem"])
  onDeleteMyType: MyType @aws_subscribe(mutations : ["deleteMyType"])
  onDeleteUserBudget(id: ID, userID: String): UserBudget @aws_subscribe(mutations : ["deleteUserBudget"])
  onUpdateBudgetCategory(budgetID: String, id: ID, precent: Float, title: String): BudgetCategory @aws_subscribe(mutations : ["updateBudgetCategory"])
  onUpdateLineItem(budgetID: String, categoryID: String, id: ID, price: Float, userID: String): LineItem @aws_subscribe(mutations : ["updateLineItem"])
  onUpdateMyType: MyType @aws_subscribe(mutations : ["updateMyType"])
  onUpdateUserBudget(id: ID, userID: String): UserBudget @aws_subscribe(mutations : ["updateUserBudget"])
}

type UserBudget {
  categories: [BudgetCategory]
  id: ID!
  userID: String!
}

type UserBudgetConnection {
  items: [UserBudget]
  nextToken: String
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateBudgetCategoryInput {
  budgetID: String!
  precent: Float
  title: String!
}

input CreateLineItemInput {
  budgetID: String!
  categoryID: String!
  price: Float!
  userID: String!
}

input CreateMyTypeInput {
  content: String!
  id: ID
  price: Int
  rating: Float
  title: String!
}

input CreateUserBudgetInput {
  userID: String!
}

input DeleteBudgetCategoryInput {
  id: ID!
}

input DeleteLineItemInput {
  id: ID!
}

input DeleteMyTypeInput {
  id: ID
}

input DeleteUserBudgetInput {
  id: ID!
}

input ModelBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input ModelFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input ModelIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input ModelIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input ModelMyTypeFilterInput {
  and: [ModelMyTypeFilterInput]
  content: ModelStringFilterInput
  id: ModelIDFilterInput
  not: ModelMyTypeFilterInput
  or: [ModelMyTypeFilterInput]
  price: ModelIntFilterInput
  rating: ModelFloatFilterInput
  title: ModelStringFilterInput
}

input ModelStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableBudgetCategoryFilterInput {
  budgetID: TableStringFilterInput
  id: TableIDFilterInput
  precent: TableFloatFilterInput
  title: TableStringFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableLineItemFilterInput {
  budgetID: TableStringFilterInput
  categoryID: TableStringFilterInput
  id: TableIDFilterInput
  price: TableFloatFilterInput
  userID: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUserBudgetFilterInput {
  id: TableIDFilterInput
  userID: TableStringFilterInput
}

input UpdateBudgetCategoryInput {
  budgetID: String
  id: ID!
  precent: Float
  title: String
}

input UpdateLineItemInput {
  budgetID: String
  categoryID: String
  id: ID!
  price: Float
  userID: String
}

input UpdateMyTypeInput {
  content: String
  id: ID!
  price: Int
  rating: Float
  title: String
}

input UpdateUserBudgetInput {
  id: ID!
  userID: String
}
